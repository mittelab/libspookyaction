include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'


stages:
  - check
  - docker
  - build
  - test
  - deploy


variables:
  PIO_LIB_FOLDER: libspookyaction
  PIO_PROJ_FOLDER: tests
  GIT_SUBMODULE_STRATEGY: recursive

.pio-cache: &pio-cache
  cache:
    paths:
      - "${PIO_PROJ_FOLDER}/.pio"

.rules-changes-sources: &rules-changes-sources
  changes:
    - libspookyaction/**/*
    - tests/**/*

.rules-changes-cicd: &rules-changes-cicd
  changes:
    - cicd/*
    - .gitlab-ci.yml

.rules-merge-to-master: &rules-merge-to-master
  if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
  when: always

.rules-master: &rules-master
  if: '$CI_COMMIT_BRANCH == "master"'
  when: always


check format:
  stage: check
  image: alpine:3.17
  allow_failure: true
  before_script:
    - apk add --update --no-cache git clang clang-extra-tools
  script:
    - >
      find . \( -path './libspookyaction/*' -or -path './tests/*' \) -and \( -name '*.[hc]' -or -name '*.[hc]pp' \) | while read -r FILE; do
          echo "Formatting $FILE"
          clang-format --style file -i "$FILE"
      done
    - git diff --patch | tee 0001-Clang-format.patch
    - test ! -s 0001-Clang-format.patch
  artifacts:
    paths:
      - 0001-Clang-format.patch
    expire_in: 1 week
    when: on_failure
  rules:
    # Run always, on merge request too
    - when: always


.build-test-firmare-template: &build-test-firmware-template
  stage: build
  image: espressif/idf:v5.1.2
  before_script:
    - cp cicd/sdkconfig ./
  script:
    - idf.py build
  rules:
    - when: always
  cache:
    paths:
      - build
  artifacts:
    paths:
      - build/*.bin
      - build/*.elf
      - build/*/*.bin
      - build/flash_args
      - build/flash_project_args
      - build/flasher_args.json
      - build/config/sdkconfig.json
  needs: []

build test firmware mbedtls:
  <<: *build-test-firmware-template
  cache:
    key: $CI_JOB_NAME

#build test firmware wolfssl:
#  <<: *build-test-firmware-template
#  cache:
#    key: $CI_JOB_NAME
#  # Customize the before script so that it uses the correct defaults
#  before_script:
#    - cp cicd/platformio.ini "${PIO_PROJ_FOLDER}/platformio.ini"
#    - cd "${PIO_PROJ_FOLDER}"
#    - cp sdkconfig-wolfssl.defaults sdkconfig.defaults


.example-build-rules: &example-build-rules
  rules:
    # [skip examples] tag for skipping
    - if: '$CI_COMMIT_MESSAGE =~ /skip examples/'
      when: never
    # Run on merge request
    - <<: *rules-merge-to-master
    # But skip by default if the sources did not change
    - <<: *rules-changes-sources
    - <<: *rules-changes-cicd

#build examples:
#  image: ${CI_REGISTRY}/proj/testinator/esp32:latest
#  stage: build
#  <<: *example-build-rules
#  script:
#    # Note that we need to set sdkconfig.defaults up in beforehand, so we make our own folder and manage it ourselves
#    # Afterward we save the firmware so that we can use it as artifact to signal that the example has been built
#    - BUILD_DIR="$(mktemp -d)"
#    - cp libspookyaction/examples/sdkconfig.defaults "${BUILD_DIR}"
#    - pio ci
#      --build-dir="${BUILD_DIR}"
#      --project-conf=cicd/platformio.ini
#      --lib=libspookyaction
#      --lib=components/mittelib/mittelib
#      --keep-build-dir
#      "libspookyaction/examples/${EXAMPLE_FILE}"
#    - find "${BUILD_DIR}/.pio" -name firmware.bin -exec cp {} "${PIO_LIB_FOLDER}/examples/${EXAMPLE_FILE}.bin" \;
#    - rm -rf "${BUILD_DIR}"
#  parallel:
#    matrix:
#      - EXAMPLE_FILE:
#        - app_desfire_demo.cpp
#        - app_scan_loop.cpp
#        - initialize.cpp
#        - scan_any_target_lowlev.cpp
#        - scan_desfire_lowlev.cpp
#        - self_test.cpp
#  artifacts:
#    paths:
#      - "${PIO_LIB_FOLDER}/examples/*.bin"
#    expire_in: 1 week
#  needs: []
#
#
#test all examples have been built:
#  # This job will make sure that the .gitlab-ci is up-to-date and all examples have been built
#  image: alpine:3.17
#  stage: test
#  <<: *example-build-rules
#  script:
#    - >
#      for file in libspookyaction/examples/*.cpp; do
#        echo "Testing that $file was included in the hardcoded list of build examples..."
#        test -e "$file.bin"
#      done
#  needs:
#    - build examples


.test-hardware-template: &test-hardware-template
  stage: test
  image: espressif/idf:v5.1.2
  tags:
    - pn532
  script:
    - cd build
    - esptool.py --chip esp32s3 write_flash @flash_args
    - pytest -s pytest_gcov.py --target esp32s3 --openocd-cli-args "-f board/esp32s3-builtin.cfg"
  rules:
    # Run always, on merge request too
    - <<: *rules-merge-to-master
    # But skip by default if the sources did not change
    - <<: *rules-changes-sources
    - <<: *rules-changes-cicd


test hardware mbedtls:
  <<: *test-hardware-template
  needs:
    - build test firmware mbedtls

#test hardware wolfssl:
#  <<: *test-hardware-template
#  needs:
#    - build test firmware wolfssl

#publish library:
#  image: ${CI_REGISTRY}/proj/testinator/esp32:latest
#  stage: deploy
#  before_script:
#    - python3 -m pip install --user gitpython
#  script:
#    - git config --global --add safe.directory $(pwd)
#    - |
#      python3 cicd/check_version.py ${PIO_LIB_FOLDER}/library.json && \
#      pio package publish --owner ${PLATFORMIO_ORG} --non-interactive ${PIO_LIB_FOLDER}
#  only:
#    - tags
#  except:
#    - branches


.docker-job-definition: &docker-job-template
  image: docker:stable
  stage: docker
  tags:
    - docker
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - export IMAGE_PATH="${CI_REGISTRY}/${CI_PROJECT_PATH}"


prepare docs image:
  <<: *docker-job-template
  script:
    - docker build
      --tag ${IMAGE_PATH}:${CI_COMMIT_SHA}
      --tag ${IMAGE_PATH}:latest
      --cache-from ${IMAGE_PATH}:latest docs
    - docker push "${IMAGE_PATH}:${CI_COMMIT_SHA}"
    - docker push "${IMAGE_PATH}:latest"
  rules:
    # Run on merge request
    - <<: *rules-merge-to-master
    # Run when the Dockerfile or CI pipeline changes
    - changes:
        - docs/Dockerfile
        - .gitlab-ci.yml
      when: always
  needs: []


build docs:
  image: "${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  stage: build
  script:
    - make -C docs clean
    - make -C docs html 2>&1 | tee docs/build.log
    - echo "Warning list:"
    - grep -iF warning docs/build.log || true
    # Consider doxygen warnings as a failure condition:
    - "test $(grep -ci '\\[~\\] [^ ]\\+\\?:\\d\\+: warning:' docs/build.log) -eq 0"
  allow_failure: true
  artifacts:
    paths:
      - docs/_build/html
  rules:
    - <<: *rules-master
    # [skip docs] tag for skipping
    - if: '$CI_COMMIT_MESSAGE =~ /skip docs/'
      when: never
    # Run on merge request
    - <<: *rules-merge-to-master
    # Run when the docs change
    - changes:
        - docs/**/*
      when: always
    # But skip by default if the sources did not change
    - <<: *rules-changes-sources
  needs:
    - job: prepare docs image
      optional: true


pages:
  stage: deploy
  image: alpine:3.17
  needs:
    - check format
    - build docs
  script:
    - mkdir -p public
    - cp -r docs/_build/html/* public
  artifacts:
    paths:
      - public
  rules:
    - <<: *rules-master
