#include "unity.h"
#include "driver/gpio.h"

#include <hsu.hpp>

#define ECHO_TEST_TXD  (GPIO_NUM_4)
#define ECHO_TEST_RXD  (GPIO_NUM_36)
#define BUF_SIZE (1024)
#define UART_DUT UART_NUM_1
#define VERSION {0x03, 0x32, 0x01, 0x06, 0x07}

HSU test_serial(UART_DUT);

int cmd(const uint8_t command, std::vector<uint8_t>& param)
{
    test_serial.send(command, param);
    return test_serial.wait_ack();
}

bool read(const uint8_t command, std::vector<uint8_t>& data)
{
    test_serial.send(command, std::vector<uint8_t>());
    test_serial.wait_ack();
    test_serial.receive(data);
    test_serial.send_ack();
    return true;

}

// void initialize_PN532()
// {
//     test_serial.wake_up();
//     uart_config_t uart_config = {
//         .baud_rate = 115200,
//         .data_bits = UART_DATA_8_BITS,
//         .parity    = UART_PARITY_DISABLE,
//         .stop_bits = UART_STOP_BITS_1,
//         .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
//     };
//     uart_param_config(UART_DUT, &uart_config);
//     uart_driver_install(UART_DUT, BUF_SIZE, BUF_SIZE, 0, NULL, 0);
//     uart_set_pin(UART_DUT, ECHO_TEST_TXD, ECHO_TEST_RXD, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);

//     TEST_ASSERT_TRUE(test_serial.wake_up());
//     std::vector<uint8_t> getversion;
//     TEST_ASSERT_TRUE(read(PN532_COMMAND_GETFIRMWAREVERSION,getversion));
//     uint8_t expected[] = VERSION;
//     TEST_ASSERT_EQUAL_INT8_ARRAY(expected, getversion.data(), sizeof(expected));
// }


// extern "C" void app_main()
// {
//     UNITY_BEGIN();
//     RUN_TEST(initialize_PN532);
//     UNITY_END();
// }


