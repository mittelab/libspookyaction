/* UART Echo Example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/uart.h"
#include "driver/gpio.h"
#include <pn532.h>
#include <esp_log.h>
#include <string.h>
#include <desfire.h>



#define LOG_LOCAL_LEVEL ESP_LOG_DEBUG


/**
 * This is an example which echos any data it receives on UART1 back to the sender,
 * with hardware flow control turned off. It does not use UART driver event queue.
 *
 * - Port: UART1
 * - Receive (Rx) buffer: on
 * - Transmit (Tx) buffer: off
 * - Flow control: off
 * - Event queue: off
 * - Pin assignment: see defines below
 */

#define ECHO_TEST_TXD  (GPIO_NUM_4)
#define ECHO_TEST_RXD  (GPIO_NUM_36)


#define BUF_SIZE (1024)



int configure_polling(uart_port_t port, TickType_t timeout)
{
    const uint8_t parameters[]={
        PN532_COMMAND_SETPARAMETERS,
        0x14
    };
    pn532_serial_sendandcheck(port, parameters, sizeof(parameters), timeout);

    const uint8_t register_write[]={
        PN532_COMMAND_WRITEREGISTER,
        0x63,       // CIU_TxMode register
        0x02,
        0x80,       // TxCRCEn      = ON
                    // TxSpeed      = 106Kbit/s
                    // InvMod       = OFF
                    // TxMix        = OFF
                    // TxFraming    = ISO/IEC 14443A/MIFARE and Passive Communication mode 106 kbit/s

        0x63,       // CIU_RxMode register 
        0x03,
        0x80,       // RxCRCEn      = ON
                    // RxSpeed      = 106Kbit/s
                    // RxNoErr      = OFF
                    // RxMultiple   = OFF
                    // RxFraming    = ISO/IEC 14443A/MIFARE and Passive Communication mode 106 kbit/s

        0x63,
        0x05,
        0x40,

        0x63,
        0x3C,
        0x10

    };
    pn532_serial_sendandcheck(port, register_write, sizeof(register_write), timeout);

    const uint8_t rf_config[]={
        PN532_COMMAND_RFCONFIGURATION,
        0x01,
        0x00
    };
    pn532_serial_sendandcheck(port, rf_config, sizeof(rf_config), timeout);

    const uint8_t rf_config_rf[]={
        PN532_COMMAND_RFCONFIGURATION,
        0x01,
        0x01
    };
    pn532_serial_sendandcheck(port, rf_config, sizeof(rf_config), timeout);

    const uint8_t rf_config_maxretires[]={
        PN532_COMMAND_RFCONFIGURATION,
        0x05,
        0xFF,
        0xFF,
        0xFF
    };
    pn532_serial_sendandcheck(port, rf_config_maxretires, sizeof(rf_config_maxretires), timeout);
    return ESP_OK;
}

int doPolling(uart_port_t port, uint8_t *cardData, uint8_t len, TickType_t timeout)
{
    // const uint8_t polling[]={
    //     PN532_COMMAND_INAUTOPOLL,
    //     0x14,
    //     0x02,
    //     0x20,
    //     0x10,
    //     0x03,
    //     0x11,
    //     0x12,
    //     0x04
    // };
    const uint8_t polling[]={
        PN532_COMMAND_INAUTOPOLL,
        0x14,
        0x02,
        0x20,
    };
    pn532_serial_sendandcheck(port, polling, sizeof(polling), timeout);


    return ESP_OK;
}



static void echo_task()
{
    esp_log_level_set("pn532", ESP_LOG_DEBUG);
    /* Configure parameters of an UART driver,
     * communication pins and install the driver */
    uart_config_t uart_config = {
        .baud_rate = 115200,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    uart_param_config(UART_NUM_1, &uart_config);
    uart_driver_install(UART_NUM_1, BUF_SIZE, BUF_SIZE, 0, NULL, 0);
    uart_set_pin(UART_NUM_1, ECHO_TEST_TXD, ECHO_TEST_RXD, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);

    // Configure a temporary buffer for the incoming data
    uint8_t *data = (uint8_t *) malloc(100);
    uint8_t notag[]={0x61,0x00};
    int size=0;

    pn532_serial_init(UART_NUM_1);
    pn532_serial_SAMconfig(UART_NUM_1, 1000/portTICK_PERIOD_MS);
    configure_polling(UART_NUM_1, 1000/portTICK_PERIOD_MS);

    while(1)
    {
        // wait tag
        size=0;
        while(size <= 0 || memcmp(data, notag, sizeof(notag)) == 0)
        {
            size=0;
            doPolling(UART_NUM_1,data,100,10000/portTICK_PERIOD_MS);
            uart_flush_input(UART_NUM_1);

            while(size <= 0)
            {
                size = pn532_serial_read(UART_NUM_1, data, 100, 1000/portTICK_PERIOD_MS);
            }
        }
        if(size > 8)
        {
            //ESP_LOG_BUFFER_HEXDUMP("main", data+9, data[8], ESP_LOG_ERROR);
        }
        uint8_t tagid = data[1];
        uint8_t select[]={
            PN532_COMMAND_INSELECT,
            tagid
        };
        pn532_serial_sendandcheck(UART_NUM_1, select, sizeof(select), 1000/portTICK_PERIOD_MS);

        uint8_t key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        uint8_t skey[16];
        uint32_t ids[28];
        get_applications(UART_NUM_1, tagid, NULL, 1000/portTICK_PERIOD_MS);
        autenticate(UART_NUM_1, tagid, 0, key, skey, 1000/portTICK_PERIOD_MS);

        ESP_LOGE("main", "DONE");
        vTaskDelay(1000/portTICK_PERIOD_MS);
    }

    // while (1) {

    //     //pn532_serial_sendandcheck(UART_NUM_1,buffer,sizeof(buffer), 1000/portTICK_PERIOD_MS);
    //     pn532_serial_sendandcheck(UART_NUM_1, list, sizeof(list), 1000/portTICK_PERIOD_MS);
    //     uint8_t size = pn532_serial_read(UART_NUM_1,rxbuffer, sizeof(rxbuffer), 5000/portTICK_PERIOD_MS);
    //     //pn532_serial_list(UART_NUM_1,rxbuffer, sizeof(rxbuffer), 1000/portTICK_PERIOD_MS);
    //     if(size >0)
    //         ESP_LOG_BUFFER_HEXDUMP("main",rxbuffer,size * sizeof(uint8_t), ESP_LOG_INFO);

    //     ESP_LOGI("main", "DONE");
    //     vTaskDelay(1000/portTICK_PERIOD_MS);
    // }
}

void app_main()
{
    esp_log_level_set(PN532_LOG, ESP_LOG_NONE);
    esp_log_level_set(PN532_LOG_RECEIVED_DATA, ESP_LOG_NONE);
    esp_log_level_set(PN532_LOG_SENT_DATA, ESP_LOG_NONE);
    esp_log_level_set("desfire", ESP_LOG_VERBOSE);
    //esp_log_level_set("desfire", ESP_LOG_NONE);
    xTaskCreate(echo_task, "uart_echo_task", 2048 * 2, NULL, 10, NULL);
}

