stages:
  - container_build
  - check
  - test
  - deploy

.platformio-cache: &platformio-cache
  image: shaguarger/platformio:latest
  variables:
    PLATFORMIO_CORE_DIR: "$CI_PROJECT_DIR/.pio-core"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .pio-core
      - .pio

check format:
  stage: check
  image: alpine
  allow_failure: true
  before_script:
    - apk add --update --no-cache git clang
  script:
    - >
      find . \( -not -path '\./\.*' \) -and \( -name '*.[hc]' -or -name '*.[hc]pp' \) | while read -r FILE; do
          echo "Formatting $FILE"
          clang-format --style file -i "$FILE"
      done
    - git diff --patch | tee 0001-Clang-format.patch
    - test ! -s 0001-Clang-format.patch
  artifacts:
    paths:
      - 0001-Clang-format.patch
    expire_in: 1 week
    when: on_failure


test examples:
  <<: *platformio-cache
  stage: test
  script:
    - >
      for file in examples/*; do
        pio ci \
          --project-conf=cicd/platformio.ini \
          --lib="." \
          $file
      done
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /skip examples/'
      when: never
    - changes:
        - src
        - include
        - examples
        - cicd/platformio.ini


build hardware container:
  stage: container_build
  image: jdrouet/docker-with-buildx
  tags:
    - docker
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - docker buildx build --platform linux/arm/v7 -t "${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest" cicd
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE =~ /rebuild hw container/'
      when: always
    - if: '$CI_COMMIT_MESSAGE =~ /skip hw container/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
      changes:
        - cicd/*
        - .gitlab-ci.yml
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - cicd/*
        - .gitlab-ci.yml
      when: always


test hardware:
  stage: test
#  needs:
#    - job: "build hardware container"
#      optional: true
  tags:
    - pn532
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest
  before_script:
    - cp cicd/platformio.ini platformio.ini
  script:
    - pio run
    - pio test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .pio
  rules:
    - changes:
        - src
        - include
        - cicd/platformio.ini


pages:
  stage: deploy
  image: alpine
  needs: ["check format","test examples"]
  before_script:
    - apk add --update --no-cache doxygen
  script:
    - doxygen ./docs/doxigen.conf
    - mkdir -p public
    - cp -r docs/_build/html/* public
  artifacts:
    paths:
      - public
  only:
    - master
