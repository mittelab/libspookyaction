include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'


stages:
  - check
  - container
  - build
  - test
  - deploy


.pio-cache: &pio-cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .pio    

.rules-changes-sources: &rules-changes-sources
  changes:
    - src/**/*
    - include/**/*
    - examples/**/*
    - cicd/platformio.ini

.rules-changes-cicd: &rules-changes-cicd
  changes:
    - cicd/*
    - .gitlab-ci.yml

.rules-merge-to-master: &rules-merge-to-master
  if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
  when: always

.rules-master: &rules-master
  if: '$CI_COMMIT_BRANCH == "master"'
  when: always


check format:
  stage: check
  image: alpine
  allow_failure: true
  before_script:
    - apk add --update --no-cache git clang
  script:
    - >
      find . \( -not -path '\./\.*' \) -and \( -name '*.[hc]' -or -name '*.[hc]pp' \) | while read -r FILE; do
          echo "Formatting $FILE"
          clang-format --style file -i "$FILE"
      done
    - git diff --patch | tee 0001-Clang-format.patch
    - test ! -s 0001-Clang-format.patch
  artifacts:
    paths:
      - 0001-Clang-format.patch
    expire_in: 1 week
    when: on_failure
  rules:
    # Run always, on merge request too
    - when: always


build hardware container:
  stage: container
  image: jdrouet/docker-with-buildx
  needs: []
  tags:
    - docker
  variables:
    BUILDX_INSTANCE: bad_boy_builder
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker buildx create --name ${BUILDX_INSTANCE}
    - docker buildx inspect --bootstrap
    - docker buildx ls
    - docker buildx use ${BUILDX_INSTANCE}
  script:
    - docker buildx build --platform linux/arm/v7,linux/amd64 --push -t "${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest" cicd
  after_script:
    - docker buildx rm ${BUILDX_INSTANCE}
  rules:
    # [skip hw container] [rebuild hw container] tags
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE =~ /rebuild hw container/'
      when: always
    - if: '$CI_COMMIT_MESSAGE =~ /skip hw container/'
      when: never
    # Otherwise automatically rebuild on master and on merge requests that change the pipeline
    - <<: *rules-merge-to-master
      <<: *rules-changes-cicd
    - <<: *rules-master
      <<: *rules-changes-cicd


build test firmware:
  stage: build
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest
  <<: *pio-cache
  before_script:
    - cp cicd/platformio.ini platformio.ini
  script:
    # Remove the cached firmwares to ensure we will rebuild
    - rm -f .pio/**/firmware.{bin,elf}
    - pio run
    - pio test --without-uploading --without-testing
  artifacts:
    paths:
      - .pio/**/*.checksum  # Without this, `pio run` deletes the firmware
      - .pio/**/firmware.bin
      - .pio/**/firmware.elf
  rules:
    - when: always


build examples:
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest
  stage: build
  <<: *pio-cache
  script:
    - >
      for file in examples/*; do
        pio ci \
          --project-conf=cicd/platformio.ini \
          --lib="." \
          $file
      done
  rules:
    # [skip examples] tag for skipping
    - if: '$CI_COMMIT_MESSAGE =~ /skip examples/'
      when: never
    # Run on merge request
    - <<: *rules-merge-to-master
    # But skip by default if the sources did not change
    - <<: *rules-changes-sources
    - <<: *rules-changes-cicd


test hardware:
  stage: test
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/testinator:latest
  tags:
    - pn532
  dependencies:
    - build test firmware
  before_script:
    - cp cicd/platformio.ini platformio.ini
  script:
    # Make two attempts at uploading. Do not use pio test beause it always returns 0
    - pio run -t nobuild -t upload --verbose || pio run -t nobuild -t upload --verbose
    - pio test --without-building --without-uploading --verbose
  rules:
    # Run always, on merge request too
    - <<: *rules-merge-to-master
    # But skip by default if the sources did not change
    - <<: *rules-changes-sources
    - <<: *rules-changes-cicd


pages:
  stage: deploy
  image: alpine
  needs:
    - check format
  before_script:
    - apk add --update --no-cache doxygen graphviz ttf-opensans
  script:
    - doxygen ./docs/doxigen.conf
    - mkdir -p public
    - cp -r docs/_build/html/* public
  artifacts:
    paths:
      - public
  rules:
    - <<: *rules-master
